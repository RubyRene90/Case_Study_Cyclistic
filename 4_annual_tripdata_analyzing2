/*CREATED BY: RUBY SMITH
CREATED ON: 10/02/2024
GOAL: RUN AGGREGATE DATA ON WEEKLY RESULTS AND QUARTERLY*/

SELECT
  day_of_ride,
  COUNT(day_of_ride)
FROM
  rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2
GROUP BY
  day_of_ride
ORDER BY
  day_of_ride;
___________________________________________
--analyze weekly by membership
___________________________________________

--casual(nonmembership)
SELECT
  day_of_ride,
  COUNT(day_of_ride) AS CountOfRides,
  ROUND(AVG(trip_time_seconds), 2) AS avg_triptime,
  ROUND(MIN(trip_time_seconds), 2) AS week_min,
  ROUND(MAX(trip_time_seconds), 2) AS week_max
FROM
  rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2
WHERE
  member_casual LIKE 'casual'
GROUP BY
  day_of_ride
ORDER BY
  day_of_ride;

--find rideable_type for casuals: classic vs electric
SELECT
  day_of_ride,
  COUNT(rideable_type)
FROM
  `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
WHERE
  member_casual LIKE 'casual'
  AND
  rideable_type LIKE 'electric_bike'
GROUP BY
  day_of_ride
ORDER BY
  day_of_ride;
___________________________________________

--membership
SELECT
  day_of_ride,
  COUNT(day_of_ride) AS CountOfRides,
  ROUND(AVG(trip_time_seconds), 2) AS avg_triptime,
  ROUND(MIN(trip_time_seconds), 2) AS week_min,
  ROUND(MAX(trip_time_seconds), 2) AS week_max
FROM
  rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2
WHERE
  member_casual LIKE 'member'
GROUP BY
  day_of_ride
ORDER BY
  day_of_ride;

--find rideable_type for members: classic vs electric
SELECT
  day_of_ride,
  COUNT(rideable_type)
FROM
  `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
WHERE
  member_casual LIKE 'member'
  AND
  rideable_type LIKE 'classic_bike'
GROUP BY
  day_of_ride
ORDER BY
  day_of_ride;
___________________________________________
--used to calculate how many riders are above or below avg.
___________________________________________
--members
SELECT
  COUNT(member_casual) AS count_of_riders
FROM
  `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
WHERE
  trip_time_seconds <   --change sign to get opposite results
  (
    SELECT
      AVG(trip_time_seconds)
    FROM
      `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
    WHERE
      member_casual LIKE 'member'
  )
  AND
    member_casual LIKE 'member';
___________________________________________
--casuals
SELECT
  COUNT(member_casual) AS count_of_riders
FROM
  `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
WHERE
  trip_time_seconds >    --change sign to get opposite results.
  (
    SELECT
      AVG(trip_time_seconds)
    FROM
      `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
    WHERE
      member_casual LIKE 'casual'
  )
  AND
    member_casual LIKE 'casual';
___________________________________________
--checking how many people are below 1, 1-5, and 5-10 min of usage, etc.
SELECT
  COUNT(member_casual)
FROM
  rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2
WHERE 
  trip_time_seconds > 3600
  AND
  trip_time_seconds < 10800; --change amount of time to count how many rides of that time


SELECT
  member_casual,
  COUNT(member_casual)
FROM
  rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2
WHERE 
  trip_time_seconds > 3600
  and
  trip_time_seconds < 10800     --change amount of time to count how many rides of that time
GROUP BY
  member_casual;
___________________________________________
--checking how many people are at or above 3hr of usage.
SELECT
  COUNT(member_casual)
FROM
  rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2
WHERE 
  trip_time_seconds >= 10800; --change amount of time to count how many rides of that time


SELECT
  member_casual,
  COUNT(member_casual)
FROM
  rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2
WHERE 
  trip_time_seconds >= 10800 --change amount of time to count how many rides of that time
GROUP BY
  member_casual;

___________________________________________
--check quarterly counts and average
___________________________________________

--First quarter, September - November, members vs. casuals
SELECT
  day_of_ride,
  COUNT(member_casual) AS count_of_riders,
  ROUND(AVG(trip_time_seconds), 2) AS quarterly_avg
FROM
  (
  SELECT
    *
  FROM
    `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
  WHERE
    start_date BETWEEN '2023-09-01' AND '2023-11-30'
    AND
    member_casual LIKE 'member'  --change to update which member status
  )  
GROUP BY
  day_of_ride;
___________________________________________

--Second quarter, December - February, members vs casuals.

SELECT
  day_of_ride,
  COUNT(member_casual) AS count_of_riders,
  ROUND(AVG(trip_time_seconds), 2) AS quarterly_avg
FROM
  (
  SELECT
    *
  FROM
    `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
  WHERE
    start_date BETWEEN '2023-12-01' AND '2024-02-29'
    AND
    member_casual LIKE 'casual' --change to update which member status
  )  
GROUP BY
  day_of_ride;
___________________________________________

--Third quarter, March - May, members vs casuals.

SELECT
  day_of_ride,
  COUNT(member_casual) AS count_of_riders,
  ROUND(AVG(trip_time_seconds), 2) AS quarterly_avg
FROM
  (
  SELECT
    *
  FROM
    `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
  WHERE
    start_date BETWEEN '2024-03-01' AND '2024-05-31'
    AND
    member_casual LIKE 'casual' --change to update which member status
  )  
GROUP BY
  day_of_ride;
___________________________________________

--Fourth quarter, June - August, members vs casuals.

SELECT
  day_of_ride,
  COUNT(member_casual) AS count_of_riders,
  ROUND(AVG(trip_time_seconds), 2) AS quarterly_avg
FROM
  (
  SELECT
    *
  FROM
    `rs-project-01-429415.cyclistic_bike_data.annual_202309_202408_tripdata2`
  WHERE
    start_date BETWEEN '2024-06-01' AND '2024-08-31'
    AND
    member_casual LIKE 'casual' --change to update which member status
  )  
GROUP BY
  day_of_ride;
